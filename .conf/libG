#!/bin/bash
#########################################
#                 			#
# V0.1 14/10/2012 version HPUX    	#
#					# 
# V0.2 10/01/2013 version linux		#
# v0.3 12/01/2013 ceci est devenue la   #
# libGenerale				#
# V0.4 17/01/2013 menus correction 	#
# et reorg				#
#########################################
# USAGE DE LA LIBG : la libG doit etre charge(source) en dernier car elle contient des constantes optionnelles
####IDEES#####
#j'aimerais revoir le code pour qu'il fonctionne en ksh
#ainsi je pourrais l'utiliser aussi au bureau
#############
####CONSTANTES#####
CONT=0
ERR_SYSTEME=251
ERR_USAGE=252
####variables######
${ANCIEN:=_old}
####fonctions######

function aide {
echo "
usage : $0
		-sauve : sauvegarde le noyau et l'initrd avant maj puis fait un split avec trackchanges
		-valide : fait un merge après maj, supprime les sauvegardes et copie le nouveau noyau vers le second disque
		-retour : debute le retour arriere en faisant un split vers root_old
		-echange : apres reboot "
}
function retour
{
#usage : retour "code retour" "message" "code retour de remplacement"
if [ "$1" -ne 0 ];then
	if [ $# -eq 3 ];then
		sortie=$3
	else 
		sortie=$1
	fi
	echo "$2 KO"
	if [ "$sortie" -ne 0 ];then
		exit $sortie
	fi
else 
	echo "$2 OK"
fi
}
function assocRep
{
#usage : assocRep "rep" "fichiers"
if [ $# -ne 2 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi
for fichier in $2;do resultat="${1}/${fichier} $resultat";done
echo $resultat
}
function inventaire
{
#usage : inventaire "fichiers a inventorier" 
if [ $# -ne 1 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi
demande="$1"
#verif fichiers noyau
	for fichier in $demande;do 
		if [ ! -e ${fichier} ];then 
			retour 251 "le fichier $fichier n'existe pas
			fin de l'inventaire"
		else 
			retour 0 "$fichier trouve"
		fi
	done
}
function contientElement
{
#usage : contientElement "element a trouver" "tableau"
#${@:2} represente les arguments à partir du deuxieme element
#$1 est l'element a trouver

if [ $# -lt 2 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi

for element in "${@:2}"; do [[ "$element" == "$1" ]] && return 0;done
return 1
}
function sauvegarde
{
#sauvegarde la partie boot lorqu'elle n'est pas en lvm
#usage : sauvegarde "liste des fichiers à sauvegarder" / sauvegarde "liste des fichiers" "destination"
#usage magique(bidon ;-) ) : en ajoutant un troisieme on peut ajouter une extention au fichier destination
if [ $# -gt 3 ] || [ $# -eq 0 ];then 
retour 252 "$FUNCNAME : nombre d'arguments invalide"
fi
liste_fichiers="$1"
local reps
local rep
####calcul de la taille des fichiers
total=$(du -k ${liste_fichiers[@]} | awk '{total+=$1}END{print total}')

if [ $# -eq 1 ];then
for fichier in $liste_fichiers;do 
if [ "$rep" != "${fichier%/*}" ];then 
	if [ -z "$reps" ];then 
		reps=(${fichier%/*})
		rep=${fichier%/*}
	elif [ ! contientElement "$rep" "$reps" ];then
		rep=${fichier%/*}
		reps[${#reps[@]}]=$rep	
	fi
fi
done
for rep in ${reps[@]};do 
	total_dispo=$(($total_dispo+$(df -Pk $rep | awk '{if (NR>1){print $4}}')))
done

elif [ $# -eq 2 ];then
destination=$2
total_dispo=$(df -Pk $destination)
else 
destination=$2
total_dispo=$(df -Pk $destination)
old=$3
fi
if [ "$total_dispo" -lt "$total" ];then
	retour 251 "espace disque insuffisant"
fi
if [ -z "$destination" ];then
	for fichier in $liste_fichiers;do
		cp $fichier ${fichier}${ANCIEN}
		retour $? "copie de $fichier vers ${fichier}${ANCIEN}" 251
	done
elif [ -z "$old" ];then 
	for fichier in $liste_fichiers;do
		cp $fichier ${destination}
		retour $? "copie de $fichier vers ${destination}" 251
	done	
else 
	for fichier in $liste_fichiers;do
		cp $fichier ${destination}/${fichier}${ANCIEN}
		retour $? "copie de $fichier vers ${destination}/${fichier}${ANCIEN}" 251
	done
fi
}
####Principale#####

#inclusions

#tests

##essai fonctions
#fichiers="maj.conf libmaj"
#regarde=$(assocRep ".conf" "$fichiers") 
#inventaire "$regarde"

