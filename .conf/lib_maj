#!/bin/bash
#########################################
# VOGEL Thierry   			#
#                 			#
# V0.1 14/10/2012 version HPUX    	#
#					# 
# V0.2 10/01/2013 version linux		#
# v0.3 12/01/2013 ceci est la lib_maj   #
#########################################
####IDEES#####
#cette lib contient des fonctions specifiques
#ainsi que les variables d'environnement
#############
#####variables#####
####fonctions######
function aide {
echo "
usage : $0
                -sauve : sauvegarde le noyau et l'initrd avant maj puis fait un split avec trackchanges
                -valide : fait un merge aprÃ¨s maj, supprime les sauvegardes et copie le nouveau noyau ve
rs le second disque
                -retour : debute le retour arriere en faisant un split vers root_old
                -echange : apres reboot "
}

function split
{
#fonction bacle car je cherche une solution
#usage : split "nom lv complet avec chemin : /dev/vg00/root"
#la fonction verifie que la copy est complete et split
if [ "$(lvs $lv_root -o copy_percent | awk '{if (NR>1) {if ($1=="100,00"){print "OK"}else {print "KO"}}}')" == "OK" ];then 
        lvconvert --splitmirrors 1 --trackchanges $1
        retour $? "split de $1" 251
fi
}
function valide
{
#usage : valide "lv a merger"
if [ $# -ne 1 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi
lvconvert --merge ${1}_rimage_1
retour $? "merge de $1" $ERR_SYSTEME
rm -f "${rep_boot}/split" "${rep_boot}/sauvegarde"
}
function retour_p1
{
#usage : retour "nouveau nom" "lv a spliter/renommer"
if [ $# -ne 2 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi
lv_origine=${2}
nouveau_nom=${1}
        lvconvert --splitmirrors 1 --name ${nouveau_nom} ${lv_origine}
        retour $? "split de $lv_origine vers $nouveau_nom" $ERR_SYSTEME
	lvchange -p rw ${1}
        retour $? "activation droit ecriture sur ${nouveau_nom}" $ERR_SYSTEME
}
function retour_p2
{
#usage : retour_p2 "fichiers" "disque_boot" "point de montage du mirroir boot" "lv_root"
if [ $# -ne 4 ];then retour 252 "$FUNCNAME : nombre d'arguments invalide";fi
fichiers="$1"
dboot=$2
ptm=$3
lv_root=$4
mount $dboot $ptm
retour $? "montage de $dboot sur $ptm" ERR_SYSTEME

for fichier in "$fichiers";do 
        mv ${fichier}${ancien} ${fichier}
        retour $? "move de ${fichier}${ancien} vers ${fichier}"
        fichier=${ptm}/${fichier##*/}
        mv ${fichier}${ancien} ${fichier}
        retour $? "move de ${fichier}${ancien} vers ${fichier}"
done
lvremove -f $lv_root
vg=${lv_root%/*}
vg=${vg##*/}
lv=${lv##*/}
lvrename $vg ${lv}${ancien} $lv
lvconvert -m 1 --type raid1 ${vg}/${lv}
}

function split_mirror
{
fichiers=$(assocRep "$rep_boot" "$fboot")
inventaire "$fichiers"
sauvegarde "$fichiers"
touch "${rep_boot}/sauvegarde"
#inventaire "$dsboot"
#mount $dsboot $rep_sboot
#sauvegarde "$fichiers" "$rep_sboot"
#sauvegarde "$fichiers" "$rep_sboot" "$ancien"
split $lv_root
touch "${rep_boot}/split"
}
function valide_change
{
if [ -e "${rep_boot}/split" ];then
	valide "${lv_root}"
fi
}
function retour_phase1
{
if [ -e "${rep_boot}/split" ];then
	retour_p1 ${lv_root}${ancien} ${lv_root}
	touch "${rep_boot}/retour_p1"
	rm -f "${rep_boot}/split"
else 
	retour 251 "le flag de split n'a pas ete trouve"
fi
}
function retour_phase2
{
if [ -e "${rep_boot}/retour_p1" ];then
	fichiers="$(assocRep "$rep_boot" "$fboot")"
	inventaire "$fichiers"
	#retour_p2 "${fichiers}" "${dsboot}" "${rep_sboot}" "${lv_root}"
	rm -f "${rep_boot}/retour_p1"
else
	retour 251 "le flag de retour_p1 n'a pas ete trouve"
fi
}
####Principale#####

#inclusions

#tests

##essai fonctions
#fichiers="maj.conf libmaj"
#regarde=$(assocRep ".conf" "$fichiers") 
#inventaire "$regarde"

if [ $# -ne 1 ];then
        echo "Nombre d'arguments incorrects";
        aide;
	exit 251;
fi

###inventaire des elements necessaires(fichiers boot, disque de sauvegarde, point de montage sauvegarde)
#boot
